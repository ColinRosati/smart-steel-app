{"version":3,"sources":["logo.svg","components/SteelApp.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","SteelApp","useState","apiData","setApiData","setErrApi","fetcherData","a","fetch","then","response","json","data","Object","values","catch","err","console","log","setTimeout","useEffect","isSubscribed","options","title","text","yAxis","xAxis","chart","height","series","name","legend","enabled","y","align","verticalAlign","margin","width","maxHeight","padding","borderWidth","itemMarginTop","itemMarginBottom","backgroundColor","itemStyle","color","fontFamily","fontSize","responsive","rules","condition","maxWidth","chartOptions","layout","className","highcharts","Highcharts","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wKAAAA,EAAOC,QAAU,IAA0B,kC,uKCmJ5BC,MA/If,WACE,IADkB,EAEWC,mBAAS,IAFpB,mBAEXC,EAFW,KAEHC,EAFG,OAGUF,oBAAS,GAHnB,mBAGHG,GAHG,oBAMHC,IANG,2EAMlB,sBAAAC,EAAA,sDACc,6BAEZC,MAFY,8BAGXC,MAAM,SAACC,GAAD,OAAmBA,EAASC,UAClCF,MAAM,SAAAG,GAAI,OAAIR,EAAWS,OAAOC,OAAOF,GAAM,OAC7CG,OAAM,SAAAC,GACLX,GAAU,GACVD,EAAW,kBACXa,QAAQC,IAAI,gCACZC,YAAW,kBAAKb,MAAc,QAVlC,4CANkB,sBAuBlBc,qBAAU,WACR,IAAIC,GAAe,EAInB,OAHMA,GACFf,IAEG,kBAAMe,GAAe,KAC5B,IAIF,IAaMC,EAAU,CACdC,MAAO,CACLC,KAAM,eAERC,MAAO,CACLF,MAAO,CACHC,KAAM,UAEZE,MAAO,CACPH,MAAO,CACHC,KAAM,YAGdG,MAAM,CACJC,OAAO,KAEPC,OAAQ,CAAC,CACLC,KAAM,WACNlB,KA/BSC,OAAOC,OAAOX,GAAS,IAgCjC,CACC2B,KAAM,WACNlB,KAjCSC,OAAOC,OAAOX,GAAS,IAkCjC,CACD2B,KAAM,WACNlB,KAnCWC,OAAOC,OAAOX,GAAS,IAoCjC,CACD2B,KAAM,WACNlB,KArCWC,OAAOC,OAAOX,GAAS,IAsCjC,CACD2B,KAAM,WACNlB,KAvCWC,OAAOC,OAAOX,GAAS,IAwCjC,CACD2B,KAAM,WACNlB,KAzCWC,OAAOC,OAAOX,GAAS,IA0CjC,CACD2B,KAAM,WACNlB,KA3CWC,OAAOC,OAAOX,GAAS,IA4CjC,CACD2B,KAAM,WACNlB,KA7CWC,OAAOC,OAAOX,GAAS,IA8CjC,CACD2B,KAAM,WACNlB,KA/CWC,OAAOC,OAAOX,GAAS,KAgDjC,CACD2B,KAAM,WACNlB,KAjDWC,OAAOC,OAAOX,GAAS,MAmDpC4B,OAAQ,CACNC,SAAS,EACTC,EAAG,GACHC,MAAO,SACPC,cAAe,SACfC,OAAQ,GACRC,MAAO,KACPC,UAAW,IACXC,QAAQ,GACRC,YAAa,EACbC,cAAe,GACfC,iBAAkB,GAClBC,gBAAgB,UAChBC,UAAW,CACHC,MAAO,UACPC,WAAY,GACZC,SAAS,OACTR,QAAQ,SAGhBS,WAAY,CACVC,MAAO,CAAC,CACJC,UAAW,CACPC,SAAU,KAEdC,aAAc,CACVrB,OAAQ,CACJsB,OAAQ,aACRnB,MAAO,SACPC,cAAe,eAQ/B,OACE,6BACA,yBAAKmB,UAAU,UACb,2CACA,kGAEF,yBAAKA,UAAU,eACf,kBAAC,IAAD,CAAiBC,WAAYC,IAAYlC,QAASA,O,MC9HvCmC,MAVf,WACE,OACE,yBAAKH,UAAU,OAEb,kBAAC,EAAD,QCGcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5D,MAAK,SAAA6D,GACjCA,EAAaC,kB","file":"static/js/main.d078b286.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, {useEffect, useState} from 'react';\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\n\r\nfunction SteelApp() {\r\n  let sensrData = ''\r\n  const [apiData,setApiData] = useState({}) // data state\r\n  const [errApi, setErrApi] = useState(false) // error state\r\n\r\n  // async function to await sever response\r\n  async function fetcherData() {\r\n    const url = \"http://127.0.0.1:7410/data\"; // api url\r\n\r\n    fetch(url) // call api endpoint\r\n    .then( (response: any) => response.json()) // coerse data into JSON\r\n    .then( data => setApiData(Object.values(data)[0]))   // only grab the nested object value\r\n    .catch(err => {// catch any error\r\n      setErrApi(true) // set error state\r\n      setApiData(\"Error Response\")  // set error into data state\r\n      console.log(\"error api response try again\") // print error in console\r\n      setTimeout(()=> fetcherData(),2000); // try api endpoint again\r\n    });\r\n  }\r\n\r\n  // on mount call fetch API \r\n  // set data into state\r\n  // wrap effect in subscribed to only call once. useful when testing\r\n  useEffect(() => {\r\n    let isSubscribed = true\r\n      if (isSubscribed) {\r\n        fetcherData()\r\n      }\r\n    return () => isSubscribed = false\r\n  },[])\r\n\r\n\r\n  // creata sensor variables\r\n  const sns0 = Object.values(apiData)[2];\r\n  const sns1 = Object.values(apiData)[3];\r\n  const sns2 = Object.values(apiData)[4];\r\n  const sns3 = Object.values(apiData)[5];\r\n  const sns4 = Object.values(apiData)[6];\r\n  const sns5 = Object.values(apiData)[7];\r\n  const sns6 = Object.values(apiData)[8];\r\n  const sns7 = Object.values(apiData)[9];\r\n  const sns8 = Object.values(apiData)[10];\r\n  const sns9 = Object.values(apiData)[11];\r\n\r\n\r\n  //hight charts options\r\n  const options = {\r\n    title: {\r\n      text: 'Sensor data'\r\n    },\r\n    yAxis: {\r\n      title: {\r\n          text: 'class'\r\n      }\r\n  },xAxis: {\r\n    title: {\r\n        text: 'samples'\r\n    }\r\n},\r\nchart:{\r\n  height:800\r\n},\r\n  series: [{\r\n      name: 'sensor 0',\r\n      data: sns0\r\n  }, {\r\n      name: 'sensor 1',\r\n      data: sns1\r\n  }, {\r\n    name: 'sensor 2',\r\n    data: sns2\r\n  }, {\r\n    name: 'sensor 3',\r\n    data: sns3\r\n  }, {\r\n    name: 'sensor 4',\r\n    data: sns4\r\n  }, {\r\n    name: 'sensor 5',\r\n    data: sns5\r\n  }, {\r\n    name: 'sensor 6',\r\n    data: sns6\r\n  }, {\r\n    name: 'sensor 7',\r\n    data: sns7\r\n  }, {\r\n    name: 'sensor 8',\r\n    data: sns8\r\n  }, {\r\n    name: 'sensor 9',\r\n    data: sns9\r\n  }],\r\n  legend: {\r\n    enabled: true,\r\n    y: 20,\r\n    align: 'center',\r\n    verticalAlign: 'bottom',\r\n    margin: 30,\r\n    width: 1300,\r\n    maxHeight: 400,\r\n    padding:70,\r\n    borderWidth: 0,\r\n    itemMarginTop: 15,\r\n    itemMarginBottom: 15,\r\n    backgroundColor:'#F6D7F9',\r\n    itemStyle: {\r\n            color: '#1D4DF8',\r\n            fontFamily: '',\r\n            fontSize:\"18px\",\r\n            padding:\"20px\"\r\n    }\r\n},\r\n    responsive: {\r\n      rules: [{\r\n          condition: {\r\n              maxWidth: 800\r\n          },\r\n          chartOptions: {\r\n              legend: {\r\n                  layout: 'horizontal',\r\n                  align: 'center',\r\n                  verticalAlign: 'bottom'\r\n              }\r\n          }\r\n      }]\r\n  }\r\n  }\r\n\r\n  //render header & highcharts \r\n  return (\r\n    <div>\r\n    <div className=\"Header\">\r\n      <h1>Smart Steel</h1>\r\n      <h5>Data analytics for steel sensors. 400 samples taken on 10 sensors</h5>\r\n    </div>\r\n    <div className=\"high-charts\">\r\n    <HighchartsReact highcharts={Highcharts} options={options} />\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SteelApp;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport SteelApp from './components/SteelApp'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <SteelApp/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}